{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/emily/Documents/spring22/capstone/22A482-TripPlanner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/home/emily/Documents/spring22/capstone/22A482-TripPlanner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/emily/Documents/spring22/capstone/22A482-TripPlanner/src/Components/LightDarkModeToggle.js\",\n    _templateObject;\n\nimport React, { useState } from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport styled from 'styled-components';\nimport { func, string } from 'prop-types';\nimport { ReactComponent as Moon } from \"@svgr/webpack?-svgo,+ref!../Images/moon.svg\";\nimport { ReactComponent as Sun } from \"@svgr/webpack?-svgo,+ref!../Images/sun.svg\";\nimport { lightTheme, darkTheme } from '../Styles/themes';\nimport { GlobalStyles } from '../Styles/global';\nimport { store } from '../store/TripUsStore';\n\nfunction LightDarkMode() {\n  var _this = this;\n\n  var _useState = useState('dark'),\n      _useState2 = _slicedToArray(_useState, 2),\n      theme = _useState2[0],\n      setTheme = _useState2[1]; // The function that toggles between themes\n\n\n  var toggleTheme = function toggleTheme() {\n    // if the theme is not light, then set it to dark\n    if (theme === 'light') {\n      setTheme('dark');\n      store.dispatch({\n        type: 'SET_THEME',\n        payload: darkTheme\n      }); // otherwise, it should be light\n    } else {\n      setTheme('light');\n      store.dispatch({\n        type: 'SET_THEME',\n        payload: lightTheme\n      });\n    }\n  };\n\n  var Toggle = function Toggle(_ref) {\n    var theme = _ref.theme,\n        toggleTheme = _ref.toggleTheme;\n    var isLight = theme === 'light';\n    return /*#__PURE__*/React.createElement(ToggleContainer, {\n      lightTheme: isLight,\n      onClick: toggleTheme,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Sun, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Moon, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }\n    }));\n  };\n\n  Toggle.propTypes = {\n    theme: string.isRequired,\n    toggleTheme: func.isRequired\n  };\n  return /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme === 'light' ? lightTheme : darkTheme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(GlobalStyles, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Toggle, {\n    theme: theme,\n    toggleTheme: toggleTheme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  })));\n}\n\nvar ToggleContainer = styled.button(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  background: \", \";\\n  border: 2px solid \", \";\\n  border-radius: 30px;\\n  cursor: pointer;\\n  display: flex;\\n  font-size: 0.5rem;\\n  justify-content: space-between;\\n  margin: 0 20px 0;\\n  overflow: hidden;\\n  padding: 0.5rem;\\n  position: fixed;\\n  width: 4rem;\\n  height: 2rem;\\n  top: 35px;\\n  left: 150px;\\n\\n  svg {\\n    height: auto;\\n    width: 1rem;\\n    transition: all 0.3s linear;\\n    \\n    // sun icon\\n    &:first-child {\\n      transform: \", \";\\n    }\\n    \\n    // moon icon\\n    &:nth-child(2) {\\n      transform: \", \";\\n    }\\n  }\\n\"])), function (_ref2) {\n  var theme = _ref2.theme;\n  return theme.gradient;\n}, function (_ref3) {\n  var theme = _ref3.theme;\n  return theme.toggleBorder;\n}, function (_ref4) {\n  var lightTheme = _ref4.lightTheme;\n  return lightTheme ? 'translateY(0)' : 'translateY(100px)';\n}, function (_ref5) {\n  var lightTheme = _ref5.lightTheme;\n  return lightTheme ? 'translateY(-100px)' : 'translateY(0)';\n});\nexport default LightDarkMode;","map":{"version":3,"sources":["/home/emily/Documents/spring22/capstone/22A482-TripPlanner/src/Components/LightDarkModeToggle.js"],"names":["React","useState","ThemeProvider","styled","func","string","lightTheme","darkTheme","GlobalStyles","store","LightDarkMode","theme","setTheme","toggleTheme","dispatch","type","payload","Toggle","isLight","propTypes","isRequired","ToggleContainer","button","gradient","toggleBorder"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,YAA7B;;;AAIA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,kBAAtC;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,KAAT,QAAsB,sBAAtB;;AAEA,SAASC,aAAT,GAAyB;AAAA;;AAAA,kBACKT,QAAQ,CAAC,MAAD,CADb;AAAA;AAAA,MACdU,KADc;AAAA,MACPC,QADO,kBAGrB;;;AACA,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB;AACA,QAAIF,KAAK,KAAK,OAAd,EAAuB;AACrBC,MAAAA,QAAQ,CAAC,MAAD,CAAR;AACAH,MAAAA,KAAK,CAACK,QAAN,CAAgB;AAACC,QAAAA,IAAI,EAAE,WAAP;AAAoBC,QAAAA,OAAO,EAAET;AAA7B,OAAhB,EAFqB,CAGvB;AACC,KAJD,MAIO;AACLK,MAAAA,QAAQ,CAAC,OAAD,CAAR;AACAH,MAAAA,KAAK,CAACK,QAAN,CAAgB;AAACC,QAAAA,IAAI,EAAE,WAAP;AAAoBC,QAAAA,OAAO,EAAEV;AAA7B,OAAhB;AACD;AACF,GAVD;;AAYA,MAAMW,MAAM,GAAG,SAATA,MAAS,OAA4B;AAAA,QAAzBN,KAAyB,QAAzBA,KAAyB;AAAA,QAAlBE,WAAkB,QAAlBA,WAAkB;AACvC,QAAMK,OAAO,GAAGP,KAAK,KAAK,OAA1B;AAEA,wBACE,oBAAC,eAAD;AAAiB,MAAA,UAAU,EAAEO,OAA7B;AAAsC,MAAA,OAAO,EAAEL,WAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMH,GATD;;AAWAI,EAAAA,MAAM,CAACE,SAAP,GAAmB;AACfR,IAAAA,KAAK,EAAEN,MAAM,CAACe,UADC;AAEfP,IAAAA,WAAW,EAAET,IAAI,CAACgB;AAFH,GAAnB;AAKA,sBACI,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAET,KAAK,KAAK,OAAV,GAAoBL,UAApB,GAAiCC,SAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,uDACI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAEI,KAAf;AAAsB,IAAA,WAAW,EAAEE,WAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,CADJ;AAQH;;AAED,IAAMQ,eAAe,GAAGlB,MAAM,CAACmB,MAAV,+mBACL;AAAA,MAAGX,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACY,QAArB;AAAA,CADK,EAEC;AAAA,MAAGZ,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACa,YAArB;AAAA,CAFD,EAwBF;AAAA,MAAGlB,UAAH,SAAGA,UAAH;AAAA,SAAoBA,UAAU,GAAG,eAAH,GAAqB,mBAAnD;AAAA,CAxBE,EA6BF;AAAA,MAAGA,UAAH,SAAGA,UAAH;AAAA,SAAoBA,UAAU,GAAG,oBAAH,GAA0B,eAAxD;AAAA,CA7BE,CAArB;AAkCA,eAAeI,aAAf","sourcesContent":["import React, { useState } from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport styled from 'styled-components';\nimport { func, string } from 'prop-types';\n\nimport {ReactComponent as Moon } from '../Images/moon.svg';\nimport {ReactComponent as Sun }  from '../Images/sun.svg';\nimport { lightTheme, darkTheme } from '../Styles/themes';\nimport { GlobalStyles } from '../Styles/global';\nimport { store } from '../store/TripUsStore';\n\nfunction LightDarkMode() {\n    const [theme, setTheme] = useState('dark');\n\n    // The function that toggles between themes\n    const toggleTheme = () => {\n      // if the theme is not light, then set it to dark\n      if (theme === 'light') {\n        setTheme('dark');\n        store.dispatch( {type: 'SET_THEME', payload: darkTheme });\n      // otherwise, it should be light\n      } else {\n        setTheme('light');\n        store.dispatch( {type: 'SET_THEME', payload: lightTheme });\n      }\n    }\n\n    const Toggle = ({ theme, toggleTheme }) => {\n        const isLight = theme === 'light';\n\n        return (\n          <ToggleContainer lightTheme={isLight} onClick={toggleTheme} >\n            <Sun />\n            <Moon />\n          </ToggleContainer>\n        );\n    };\n\n    Toggle.propTypes = {\n        theme: string.isRequired,\n        toggleTheme: func.isRequired,\n    }\n  \n    return (\n        <ThemeProvider theme={theme === 'light' ? lightTheme : darkTheme}>\n            <>\n                <GlobalStyles />\n                <Toggle theme={theme} toggleTheme={toggleTheme} />\n            </>\n        </ThemeProvider>\n    )\n}\n\nconst ToggleContainer = styled.button`\n  background: ${({ theme }) => theme.gradient};\n  border: 2px solid ${({ theme }) => theme.toggleBorder};\n  border-radius: 30px;\n  cursor: pointer;\n  display: flex;\n  font-size: 0.5rem;\n  justify-content: space-between;\n  margin: 0 20px 0;\n  overflow: hidden;\n  padding: 0.5rem;\n  position: fixed;\n  width: 4rem;\n  height: 2rem;\n  top: 35px;\n  left: 150px;\n\n  svg {\n    height: auto;\n    width: 1rem;\n    transition: all 0.3s linear;\n    \n    // sun icon\n    &:first-child {\n      transform: ${({ lightTheme }) => lightTheme ? 'translateY(0)' : 'translateY(100px)'};\n    }\n    \n    // moon icon\n    &:nth-child(2) {\n      transform: ${({ lightTheme }) => lightTheme ? 'translateY(-100px)' : 'translateY(0)'};\n    }\n  }\n`;\n\nexport default LightDarkMode;"]},"metadata":{},"sourceType":"module"}