{"ast":null,"code":"import _classCallCheck from \"/home/emily/Documents/spring22/capstone/22A482-TripPlanner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/emily/Documents/spring22/capstone/22A482-TripPlanner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { OperationTypeNode } from '../language/ast.mjs';\nimport { getNamedType, isInputObjectType, isInterfaceType, isObjectType, isUnionType } from './definition.mjs';\nimport { isDirective, specifiedDirectives } from './directives.mjs';\nimport { __Schema } from './introspection.mjs';\n/**\n * Test if the given value is a GraphQL schema.\n */\n\nexport function isSchema(schema) {\n  return instanceOf(schema, GraphQLSchema);\n}\nexport function assertSchema(schema) {\n  if (!isSchema(schema)) {\n    throw new Error(\"Expected \".concat(inspect(schema), \" to be a GraphQL schema.\"));\n  }\n\n  return schema;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Schema Definition\n *\n * A Schema is created by supplying the root types of each type of operation,\n * query and mutation (optional). A schema definition is then supplied to the\n * validator and executor.\n *\n * Example:\n *\n * ```ts\n * const MyAppSchema = new GraphQLSchema({\n *   query: MyAppQueryRootType,\n *   mutation: MyAppMutationRootType,\n * })\n * ```\n *\n * Note: When the schema is constructed, by default only the types that are\n * reachable by traversing the root types are included, other types must be\n * explicitly referenced.\n *\n * Example:\n *\n * ```ts\n * const characterInterface = new GraphQLInterfaceType({\n *   name: 'Character',\n *   ...\n * });\n *\n * const humanType = new GraphQLObjectType({\n *   name: 'Human',\n *   interfaces: [characterInterface],\n *   ...\n * });\n *\n * const droidType = new GraphQLObjectType({\n *   name: 'Droid',\n *   interfaces: [characterInterface],\n *   ...\n * });\n *\n * const schema = new GraphQLSchema({\n *   query: new GraphQLObjectType({\n *     name: 'Query',\n *     fields: {\n *       hero: { type: characterInterface, ... },\n *     }\n *   }),\n *   ...\n *   // Since this schema references only the `Character` interface it's\n *   // necessary to explicitly list the types that implement it if\n *   // you want them to be included in the final schema.\n *   types: [humanType, droidType],\n * })\n * ```\n *\n * Note: If an array of `directives` are provided to GraphQLSchema, that will be\n * the exact list of directives represented and allowed. If `directives` is not\n * provided then a default set of the specified directives (e.g. `@include` and\n * `@skip`) will be used. If you wish to provide *additional* directives to these\n * specified directives, you must explicitly declare them. Example:\n *\n * ```ts\n * const MyAppSchema = new GraphQLSchema({\n *   ...\n *   directives: specifiedDirectives.concat([ myCustomDirective ]),\n * })\n * ```\n */\n\nexport var GraphQLSchema = /*#__PURE__*/function (_Symbol$toStringTag) {\n  // Used as a cache for validateSchema().\n  function GraphQLSchema(config) {\n    _classCallCheck(this, GraphQLSchema);\n\n    var _config$extensionASTN, _config$directives; // If this schema was built from a source known to be valid, then it may be\n    // marked with assumeValid to avoid an additional type system validation.\n\n\n    this.__validationErrors = config.assumeValid === true ? [] : undefined; // Check for common mistakes during construction to produce early errors.\n\n    isObjectLike(config) || devAssert(false, 'Must provide configuration object.');\n    !config.types || Array.isArray(config.types) || devAssert(false, \"\\\"types\\\" must be Array if provided but got: \".concat(inspect(config.types), \".\"));\n    !config.directives || Array.isArray(config.directives) || devAssert(false, '\"directives\" must be Array if provided but got: ' + \"\".concat(inspect(config.directives), \".\"));\n    this.description = config.description;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = (_config$extensionASTN = config.extensionASTNodes) !== null && _config$extensionASTN !== void 0 ? _config$extensionASTN : [];\n    this._queryType = config.query;\n    this._mutationType = config.mutation;\n    this._subscriptionType = config.subscription; // Provide specified directives (e.g. @include and @skip) by default.\n\n    this._directives = (_config$directives = config.directives) !== null && _config$directives !== void 0 ? _config$directives : specifiedDirectives; // To preserve order of user-provided types, we add first to add them to\n    // the set of \"collected\" types, so `collectReferencedTypes` ignore them.\n\n    var allReferencedTypes = new Set(config.types);\n\n    if (config.types != null) {\n      var _iterator = _createForOfIteratorHelper(config.types),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var type = _step.value;\n          // When we ready to process this type, we remove it from \"collected\" types\n          // and then add it together with all dependent types in the correct position.\n          allReferencedTypes.delete(type);\n          collectReferencedTypes(type, allReferencedTypes);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n\n    if (this._queryType != null) {\n      collectReferencedTypes(this._queryType, allReferencedTypes);\n    }\n\n    if (this._mutationType != null) {\n      collectReferencedTypes(this._mutationType, allReferencedTypes);\n    }\n\n    if (this._subscriptionType != null) {\n      collectReferencedTypes(this._subscriptionType, allReferencedTypes);\n    }\n\n    var _iterator2 = _createForOfIteratorHelper(this._directives),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var directive = _step2.value;\n\n        // Directives are not validated until validateSchema() is called.\n        if (isDirective(directive)) {\n          var _iterator4 = _createForOfIteratorHelper(directive.args),\n              _step4;\n\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var arg = _step4.value;\n              collectReferencedTypes(arg.type, allReferencedTypes);\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    collectReferencedTypes(__Schema, allReferencedTypes); // Storing the resulting map for reference by the schema.\n\n    this._typeMap = Object.create(null);\n    this._subTypeMap = Object.create(null); // Keep track of all implementations by interface name.\n\n    this._implementationsMap = Object.create(null);\n\n    var _iterator3 = _createForOfIteratorHelper(allReferencedTypes),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var namedType = _step3.value;\n\n        if (namedType == null) {\n          continue;\n        }\n\n        var typeName = namedType.name;\n        typeName || devAssert(false, 'One of the provided types for building the Schema is missing a name.');\n\n        if (this._typeMap[typeName] !== undefined) {\n          throw new Error(\"Schema must contain uniquely named types but contains multiple types named \\\"\".concat(typeName, \"\\\".\"));\n        }\n\n        this._typeMap[typeName] = namedType;\n\n        if (isInterfaceType(namedType)) {\n          // Store implementations by interface.\n          var _iterator5 = _createForOfIteratorHelper(namedType.getInterfaces()),\n              _step5;\n\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var iface = _step5.value;\n\n              if (isInterfaceType(iface)) {\n                var implementations = this._implementationsMap[iface.name];\n\n                if (implementations === undefined) {\n                  implementations = this._implementationsMap[iface.name] = {\n                    objects: [],\n                    interfaces: []\n                  };\n                }\n\n                implementations.interfaces.push(namedType);\n              }\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n        } else if (isObjectType(namedType)) {\n          // Store implementations by objects.\n          var _iterator6 = _createForOfIteratorHelper(namedType.getInterfaces()),\n              _step6;\n\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var _iface = _step6.value;\n\n              if (isInterfaceType(_iface)) {\n                var _implementations = this._implementationsMap[_iface.name];\n\n                if (_implementations === undefined) {\n                  _implementations = this._implementationsMap[_iface.name] = {\n                    objects: [],\n                    interfaces: []\n                  };\n                }\n\n                _implementations.objects.push(namedType);\n              }\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n\n  _createClass(GraphQLSchema, [{\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return 'GraphQLSchema';\n    }\n  }, {\n    key: \"getQueryType\",\n    value: function getQueryType() {\n      return this._queryType;\n    }\n  }, {\n    key: \"getMutationType\",\n    value: function getMutationType() {\n      return this._mutationType;\n    }\n  }, {\n    key: \"getSubscriptionType\",\n    value: function getSubscriptionType() {\n      return this._subscriptionType;\n    }\n  }, {\n    key: \"getRootType\",\n    value: function getRootType(operation) {\n      switch (operation) {\n        case OperationTypeNode.QUERY:\n          return this.getQueryType();\n\n        case OperationTypeNode.MUTATION:\n          return this.getMutationType();\n\n        case OperationTypeNode.SUBSCRIPTION:\n          return this.getSubscriptionType();\n      }\n    }\n  }, {\n    key: \"getTypeMap\",\n    value: function getTypeMap() {\n      return this._typeMap;\n    }\n  }, {\n    key: \"getType\",\n    value: function getType(name) {\n      return this.getTypeMap()[name];\n    }\n  }, {\n    key: \"getPossibleTypes\",\n    value: function getPossibleTypes(abstractType) {\n      return isUnionType(abstractType) ? abstractType.getTypes() : this.getImplementations(abstractType).objects;\n    }\n  }, {\n    key: \"getImplementations\",\n    value: function getImplementations(interfaceType) {\n      var implementations = this._implementationsMap[interfaceType.name];\n      return implementations !== null && implementations !== void 0 ? implementations : {\n        objects: [],\n        interfaces: []\n      };\n    }\n  }, {\n    key: \"isSubType\",\n    value: function isSubType(abstractType, maybeSubType) {\n      var map = this._subTypeMap[abstractType.name];\n\n      if (map === undefined) {\n        map = Object.create(null);\n\n        if (isUnionType(abstractType)) {\n          var _iterator7 = _createForOfIteratorHelper(abstractType.getTypes()),\n              _step7;\n\n          try {\n            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n              var type = _step7.value;\n              map[type.name] = true;\n            }\n          } catch (err) {\n            _iterator7.e(err);\n          } finally {\n            _iterator7.f();\n          }\n        } else {\n          var implementations = this.getImplementations(abstractType);\n\n          var _iterator8 = _createForOfIteratorHelper(implementations.objects),\n              _step8;\n\n          try {\n            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n              var _type = _step8.value;\n              map[_type.name] = true;\n            }\n          } catch (err) {\n            _iterator8.e(err);\n          } finally {\n            _iterator8.f();\n          }\n\n          var _iterator9 = _createForOfIteratorHelper(implementations.interfaces),\n              _step9;\n\n          try {\n            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n              var _type2 = _step9.value;\n              map[_type2.name] = true;\n            }\n          } catch (err) {\n            _iterator9.e(err);\n          } finally {\n            _iterator9.f();\n          }\n        }\n\n        this._subTypeMap[abstractType.name] = map;\n      }\n\n      return map[maybeSubType.name] !== undefined;\n    }\n  }, {\n    key: \"getDirectives\",\n    value: function getDirectives() {\n      return this._directives;\n    }\n  }, {\n    key: \"getDirective\",\n    value: function getDirective(name) {\n      return this.getDirectives().find(function (directive) {\n        return directive.name === name;\n      });\n    }\n  }, {\n    key: \"toConfig\",\n    value: function toConfig() {\n      return {\n        description: this.description,\n        query: this.getQueryType(),\n        mutation: this.getMutationType(),\n        subscription: this.getSubscriptionType(),\n        types: Object.values(this.getTypeMap()),\n        directives: this.getDirectives(),\n        extensions: this.extensions,\n        astNode: this.astNode,\n        extensionASTNodes: this.extensionASTNodes,\n        assumeValid: this.__validationErrors !== undefined\n      };\n    }\n  }]);\n\n  return GraphQLSchema;\n}(Symbol.toStringTag);\n\nfunction collectReferencedTypes(type, typeSet) {\n  var namedType = getNamedType(type);\n\n  if (!typeSet.has(namedType)) {\n    typeSet.add(namedType);\n\n    if (isUnionType(namedType)) {\n      var _iterator10 = _createForOfIteratorHelper(namedType.getTypes()),\n          _step10;\n\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var memberType = _step10.value;\n          collectReferencedTypes(memberType, typeSet);\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n    } else if (isObjectType(namedType) || isInterfaceType(namedType)) {\n      var _iterator11 = _createForOfIteratorHelper(namedType.getInterfaces()),\n          _step11;\n\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var interfaceType = _step11.value;\n          collectReferencedTypes(interfaceType, typeSet);\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n\n      for (var _i = 0, _Object$values = Object.values(namedType.getFields()); _i < _Object$values.length; _i++) {\n        var field = _Object$values[_i];\n        collectReferencedTypes(field.type, typeSet);\n\n        var _iterator12 = _createForOfIteratorHelper(field.args),\n            _step12;\n\n        try {\n          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n            var arg = _step12.value;\n            collectReferencedTypes(arg.type, typeSet);\n          }\n        } catch (err) {\n          _iterator12.e(err);\n        } finally {\n          _iterator12.f();\n        }\n      }\n    } else if (isInputObjectType(namedType)) {\n      for (var _i2 = 0, _Object$values2 = Object.values(namedType.getFields()); _i2 < _Object$values2.length; _i2++) {\n        var _field = _Object$values2[_i2];\n        collectReferencedTypes(_field.type, typeSet);\n      }\n    }\n  }\n\n  return typeSet;\n}","map":null,"metadata":{},"sourceType":"module"}