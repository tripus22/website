{"ast":null,"code":"import _defineProperty from \"/home/emily/Documents/spring22/capstone/22A482-TripPlanner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { naturalCompare } from '../jsutils/naturalCompare.mjs';\nimport { Kind } from '../language/kinds.mjs';\n/**\n * Sort ValueNode.\n *\n * This function returns a sorted copy of the given ValueNode.\n *\n * @internal\n */\n\nexport function sortValueNode(valueNode) {\n  switch (valueNode.kind) {\n    case Kind.OBJECT:\n      return _objectSpread(_objectSpread({}, valueNode), {}, {\n        fields: sortFields(valueNode.fields)\n      });\n\n    case Kind.LIST:\n      return _objectSpread(_objectSpread({}, valueNode), {}, {\n        values: valueNode.values.map(sortValueNode)\n      });\n\n    case Kind.INT:\n    case Kind.FLOAT:\n    case Kind.STRING:\n    case Kind.BOOLEAN:\n    case Kind.NULL:\n    case Kind.ENUM:\n    case Kind.VARIABLE:\n      return valueNode;\n  }\n}\n\nfunction sortFields(fields) {\n  return fields.map(function (fieldNode) {\n    return _objectSpread(_objectSpread({}, fieldNode), {}, {\n      value: sortValueNode(fieldNode.value)\n    });\n  }).sort(function (fieldA, fieldB) {\n    return naturalCompare(fieldA.name.value, fieldB.name.value);\n  });\n}","map":null,"metadata":{},"sourceType":"module"}