{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useCallback, useMemo, useState } from 'react';\nimport { useQuery } from \"./useQuery.js\";\nvar EAGER_METHODS = ['refetch', 'fetchMore', 'updateQuery', 'startPolling', 'subscribeToMore'];\nexport function useLazyQuery(query, options) {\n  var _a = useState({\n    called: false\n  }),\n      execution = _a[0],\n      setExecution = _a[1];\n\n  var result = useQuery(query, __assign(__assign(__assign({}, options), execution.options), {\n    fetchPolicy: execution.called ? options === null || options === void 0 ? void 0 : options.fetchPolicy : 'standby',\n    skip: undefined\n  }));\n\n  if (!execution.called) {\n    result = __assign(__assign({}, result), {\n      loading: false,\n      data: void 0,\n      error: void 0,\n      called: false\n    });\n  }\n\n  var eagerMethods = useMemo(function () {\n    var eagerMethods = {};\n\n    var _loop_1 = function _loop_1(key) {\n      var method = result[key];\n\n      eagerMethods[key] = function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        setExecution(function (execution) {\n          return __assign(__assign({}, execution), {\n            called: true\n          });\n        });\n        return method.apply(void 0, args);\n      };\n    };\n\n    for (var _i = 0, EAGER_METHODS_1 = EAGER_METHODS; _i < EAGER_METHODS_1.length; _i++) {\n      var key = EAGER_METHODS_1[_i];\n\n      _loop_1(key);\n    }\n\n    return eagerMethods;\n  }, []);\n  result.error = result.error || void 0;\n  Object.assign(result, eagerMethods);\n  var execute = useCallback(function (executeOptions) {\n    setExecution({\n      called: true,\n      options: executeOptions\n    });\n    var promise = result.refetch(executeOptions === null || executeOptions === void 0 ? void 0 : executeOptions.variables).then(function (result1) {\n      var result2 = __assign(__assign({}, result), {\n        data: result1.data,\n        error: result1.error,\n        called: true,\n        loading: false\n      });\n\n      Object.assign(result2, eagerMethods);\n      return result2;\n    });\n    promise.catch(function () {});\n    return promise;\n  }, []);\n  return [execute, result];\n}","map":null,"metadata":{},"sourceType":"module"}